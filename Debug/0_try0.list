
0_try0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000504  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080006cc  080006cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800070c  0800070c  00010714  2**0
                  CONTENTS
  4 .ARM          00000000  0800070c  0800070c  00010714  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800070c  08000714  00010714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800070c  0800070c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000710  08000710  00010710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000714  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000714  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010714  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a51  00000000  00000000  00010744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000041f  00000000  00000000  00011195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  000115b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d8  00000000  00000000  000116d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b906  00000000  00000000  000117b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000159a  00000000  00000000  0002d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8be  00000000  00000000  0002e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8f0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002e4  00000000  00000000  000c8f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080006b4 	.word	0x080006b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080006b4 	.word	0x080006b4

08000208 <gpio_setup>:
 */

void gpio_setup_porta();
void gpio_setup_portb();

void gpio_setup() {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	gpio_setup_porta();
 800020c:	f000 f804 	bl	8000218 <gpio_setup_porta>
	gpio_setup_portb();
 8000210:	f000 f82e 	bl	8000270 <gpio_setup_portb>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}

08000218 <gpio_setup_porta>:

void gpio_setup_porta() {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	/*
	 * PA9 USART1 TX
	 */
	GPIOA->MODER = (GPIOA->MODER & ~(GPIO_MODER_MODER9_0)) | GPIO_MODER_MODER9_1; //PA9 set to alternate function
 800021c:	4b13      	ldr	r3, [pc, #76]	; (800026c <gpio_setup_porta+0x54>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <gpio_setup_porta+0x54>)
 8000226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~(1U << 7)) | (0x07 << 4); //PA9 to AF7
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <gpio_setup_porta+0x54>)
 800022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000234:	4a0d      	ldr	r2, [pc, #52]	; (800026c <gpio_setup_porta+0x54>)
 8000236:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800023a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT9; //PA9 output push-pull
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <gpio_setup_porta+0x54>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <gpio_setup_porta+0x54>)
 8000242:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000246:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR9; //PA9 output speed very high
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <gpio_setup_porta+0x54>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a07      	ldr	r2, [pc, #28]	; (800026c <gpio_setup_porta+0x54>)
 800024e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000252:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR9; //PA9 no pull-up no pull-down
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <gpio_setup_porta+0x54>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <gpio_setup_porta+0x54>)
 800025a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800025e:	60d3      	str	r3, [r2, #12]

}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40020000 	.word	0x40020000

08000270 <gpio_setup_portb>:
void gpio_setup_portb() {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	/*
	 * PB7 USART1 RX
	 */
	GPIOB->MODER = (GPIOB->MODER & ~(GPIO_MODER_MODER7_0)) | (GPIO_MODER_MODER7_1); //PB7 set to alternate function
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <gpio_setup_portb+0x54>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800027c:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <gpio_setup_portb+0x54>)
 800027e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000282:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] = (GPIOB->AFR[0] & ~(1U << 31)) | (0x07 << 28); //PB7 to AF7
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <gpio_setup_portb+0x54>)
 8000286:	6a1b      	ldr	r3, [r3, #32]
 8000288:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <gpio_setup_portb+0x54>)
 800028e:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8000292:	6213      	str	r3, [r2, #32]
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_7); //PB7 output push-pull
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <gpio_setup_portb+0x54>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <gpio_setup_portb+0x54>)
 800029a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800029e:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR7); //PB7 output speed very high
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <gpio_setup_portb+0x54>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <gpio_setup_portb+0x54>)
 80002a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002aa:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR7); //PB7 no pull-up no pull-down
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <gpio_setup_portb+0x54>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <gpio_setup_portb+0x54>)
 80002b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002b6:	60d3      	str	r3, [r2, #12]

}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40020400 	.word	0x40020400

080002c8 <main>:
#include "main.h"

int main(void) {
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b094      	sub	sp, #80	; 0x50
 80002cc:	af00      	add	r7, sp, #0
	rcc_setup();
 80002ce:	f000 f851 	bl	8000374 <rcc_setup>
	gpio_setup();
 80002d2:	f7ff ff99 	bl	8000208 <gpio_setup>
	uart1_setup();
 80002d6:	f000 f887 	bl	80003e8 <uart1_setup>
	uart1_enable();
 80002da:	f000 f8b9 	bl	8000450 <uart1_enable>
	uart1_enable_tx();
 80002de:	f000 f8c7 	bl	8000470 <uart1_enable_tx>
	uart1_enable_rx();
 80002e2:	f000 f8d5 	bl	8000490 <uart1_enable_rx>
	while (1) {
		uint8_t buffer[10];
		uint8_t x;
		uart1_sendByte('\r');uart1_sendByte('\n');
 80002e6:	200d      	movs	r0, #13
 80002e8:	f000 f8e2 	bl	80004b0 <uart1_sendByte>
 80002ec:	200a      	movs	r0, #10
 80002ee:	f000 f8df 	bl	80004b0 <uart1_sendByte>

		uart1_sendByte('H');uart1_sendByte('i');
 80002f2:	2048      	movs	r0, #72	; 0x48
 80002f4:	f000 f8dc 	bl	80004b0 <uart1_sendByte>
 80002f8:	2069      	movs	r0, #105	; 0x69
 80002fa:	f000 f8d9 	bl	80004b0 <uart1_sendByte>

		uart1_sendByte('\r');uart1_sendByte('\n');
 80002fe:	200d      	movs	r0, #13
 8000300:	f000 f8d6 	bl	80004b0 <uart1_sendByte>
 8000304:	200a      	movs	r0, #10
 8000306:	f000 f8d3 	bl	80004b0 <uart1_sendByte>

		uint8_t message[] = "Enter a string (10 chars max) and a digit to be sent to you:\r\n";
 800030a:	4b19      	ldr	r3, [pc, #100]	; (8000370 <main+0xa8>)
 800030c:	1d3c      	adds	r4, r7, #4
 800030e:	461d      	mov	r5, r3
 8000310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000320:	c407      	stmia	r4!, {r0, r1, r2}
 8000322:	8023      	strh	r3, [r4, #0]
 8000324:	3402      	adds	r4, #2
 8000326:	0c1b      	lsrs	r3, r3, #16
 8000328:	7023      	strb	r3, [r4, #0]
		uart1_sendArray(message, 62);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	213e      	movs	r1, #62	; 0x3e
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f8dc 	bl	80004ec <uart1_sendArray>

		uart1_receiveArray(buffer, 10);
 8000334:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000338:	210a      	movs	r1, #10
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f920 	bl	8000580 <uart1_receiveArray>
		uart1_sendArray(buffer, 10);
 8000340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000344:	210a      	movs	r1, #10
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f8d0 	bl	80004ec <uart1_sendArray>

		uart1_sendByte('\r');
 800034c:	200d      	movs	r0, #13
 800034e:	f000 f8af 	bl	80004b0 <uart1_sendByte>
		uart1_sendByte('\n');
 8000352:	200a      	movs	r0, #10
 8000354:	f000 f8ac 	bl	80004b0 <uart1_sendByte>

		uart1_receiveByte(&x);
 8000358:	f107 0343 	add.w	r3, r7, #67	; 0x43
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f903 	bl	8000568 <uart1_receiveByte>
		uart1_sendByte(x);
 8000362:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f8a2 	bl	80004b0 <uart1_sendByte>
	while (1) {
 800036c:	e7bb      	b.n	80002e6 <main+0x1e>
 800036e:	bf00      	nop
 8000370:	080006cc 	.word	0x080006cc

08000374 <rcc_setup>:
 */
void rcc_usart1();
void rcc_gpio_porta();
void rcc_gpio_portb();

void rcc_setup() {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	rcc_usart1();
 8000378:	f000 f806 	bl	8000388 <rcc_usart1>
	rcc_gpio_porta();
 800037c:	f000 f814 	bl	80003a8 <rcc_gpio_porta>
	rcc_gpio_portb();
 8000380:	f000 f822 	bl	80003c8 <rcc_gpio_portb>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}

08000388 <rcc_usart1>:

void rcc_usart1() {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <rcc_usart1+0x1c>)
 800038e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <rcc_usart1+0x1c>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40023800 	.word	0x40023800

080003a8 <rcc_gpio_porta>:

void rcc_gpio_porta() {
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <rcc_gpio_porta+0x1c>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <rcc_gpio_porta+0x1c>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40023800 	.word	0x40023800

080003c8 <rcc_gpio_portb>:

void rcc_gpio_portb() {
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <rcc_gpio_portb+0x1c>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <rcc_gpio_portb+0x1c>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800

080003e8 <uart1_setup>:
#include "usart1.h"

void uart1_setup() {
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	//Set all configs to Reset Value
	USART1->CR1 = 0x00;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <uart1_setup+0x60>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
	USART1->CR2 = 0x00;
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <uart1_setup+0x60>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
	USART1->CR3 = 0x00;
 80003f8:	4b13      	ldr	r3, [pc, #76]	; (8000448 <uart1_setup+0x60>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
	USART1->BRR = 0x00;
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <uart1_setup+0x60>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
	USART1->GTPR = 0x00;
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <uart1_setup+0x60>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
	USART1->RQR = 0x00;
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <uart1_setup+0x60>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
	USART1->ISR = 0x020000C0;
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <uart1_setup+0x60>)
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <uart1_setup+0x64>)
 8000414:	61da      	str	r2, [r3, #28]

	USART1->CR1 &= ~(USART_CR1_M); //Set word length 8
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <uart1_setup+0x60>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0b      	ldr	r2, [pc, #44]	; (8000448 <uart1_setup+0x60>)
 800041c:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000420:	6013      	str	r3, [r2, #0]

	USART1->CR2 |= USART_CR2_RTOEN; //enable receiver timeout
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <uart1_setup+0x60>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	4a08      	ldr	r2, [pc, #32]	; (8000448 <uart1_setup+0x60>)
 8000428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800042c:	6053      	str	r3, [r2, #4]
	USART1->RTOR = 0x01; //receiver times out after one full bit without next start bit
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <uart1_setup+0x60>)
 8000430:	2201      	movs	r2, #1
 8000432:	615a      	str	r2, [r3, #20]

	USART1->BRR = 0x683; //Set baudrate to 9600 (Fck = 16MHz)
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <uart1_setup+0x60>)
 8000436:	f240 6283 	movw	r2, #1667	; 0x683
 800043a:	60da      	str	r2, [r3, #12]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40011000 	.word	0x40011000
 800044c:	020000c0 	.word	0x020000c0

08000450 <uart1_enable>:

void uart1_enable() {
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
	USART1->CR1 |= USART_CR1_UE; //USART1 Enable
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <uart1_enable+0x1c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <uart1_enable+0x1c>)
 800045a:	f043 0301 	orr.w	r3, r3, #1
 800045e:	6013      	str	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40011000 	.word	0x40011000

08000470 <uart1_enable_tx>:
void uart1_disable() {
	USART1->CR1 &= ~USART_CR1_UE; //USART1 Disable
}
void uart1_enable_tx() {
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	USART1->CR1 |= USART_CR1_TE; // USART Transmitter enabled
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <uart1_enable_tx+0x1c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <uart1_enable_tx+0x1c>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40011000 	.word	0x40011000

08000490 <uart1_enable_rx>:
void uart1_disable_tx() {
	USART1->CR1 &= ~USART_CR1_TE; //USART Transmitter disabled
}
void uart1_enable_rx() {
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	USART1->CR1 |= USART_CR1_RE; //USART Receiver enabled
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <uart1_enable_rx+0x1c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <uart1_enable_rx+0x1c>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6013      	str	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40011000 	.word	0x40011000

080004b0 <uart1_sendByte>:
void uart1_disable_rx() {
	USART1->CR1 &= ~USART_CR1_RE; //USART Receiver disabled
}

void uart1_sendByte(uint8_t data) {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	USART1->TDR = data; //Load byte into transmit data register to be loaded into shift register; TXE bit cleared
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <uart1_sendByte+0x38>)
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	6293      	str	r3, [r2, #40]	; 0x28
	while (!(USART1->ISR & USART_ISR_TC)); //Wait until Transfer Complete bit is set
 80004c0:	bf00      	nop
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <uart1_sendByte+0x38>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f9      	beq.n	80004c2 <uart1_sendByte+0x12>
	USART1->ICR &= USART_ICR_TCCF; //clear transfer complete flag
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <uart1_sendByte+0x38>)
 80004d0:	6a1b      	ldr	r3, [r3, #32]
 80004d2:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <uart1_sendByte+0x38>)
 80004d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004d8:	6213      	str	r3, [r2, #32]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40011000 	.word	0x40011000

080004ec <uart1_sendArray>:
void uart1_sendArray(uint8_t data[], uint32_t length) {
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	USART1->ICR &= USART_ICR_TCCF; //clear transfer complete flag
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <uart1_sendArray+0x78>)
 80004f8:	6a1b      	ldr	r3, [r3, #32]
 80004fa:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <uart1_sendArray+0x78>)
 80004fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000500:	6213      	str	r3, [r2, #32]
	uint32_t pointer = 0; // what array element to send
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (data[pointer] != '\0' && pointer < length) { //check if not string termination character or end of array
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d014      	beq.n	800053c <uart1_sendArray+0x50>
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	429a      	cmp	r2, r3
 8000518:	d210      	bcs.n	800053c <uart1_sendArray+0x50>
			while (!(USART1->ISR & USART_ISR_TXE)); //wait while data is sent out to shift register
 800051a:	bf00      	nop
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <uart1_sendArray+0x78>)
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f9      	beq.n	800051c <uart1_sendArray+0x30>
			USART1->TDR = data[pointer];
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	4413      	add	r3, r2
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <uart1_sendArray+0x78>)
 8000532:	629a      	str	r2, [r3, #40]	; 0x28
			pointer++;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
		if (data[pointer] != '\0' && pointer < length) { //check if not string termination character or end of array
 800053a:	e7e4      	b.n	8000506 <uart1_sendArray+0x1a>
		} else
			break;
	}
	while (!(USART1->ISR & USART_ISR_TC)); //Wait while Transfer Complete flag is set
 800053c:	bf00      	nop
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <uart1_sendArray+0x78>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0f9      	beq.n	800053e <uart1_sendArray+0x52>
	USART1->ICR &= USART_ICR_TCCF; //clear transfer complete flag
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <uart1_sendArray+0x78>)
 800054c:	6a1b      	ldr	r3, [r3, #32]
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <uart1_sendArray+0x78>)
 8000550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000554:	6213      	str	r3, [r2, #32]
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40011000 	.word	0x40011000

08000568 <uart1_receiveByte>:

void uart1_receiveByte(uint8_t *data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	uart1_receiveArray(data, 1);
 8000570:	2101      	movs	r1, #1
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 f804 	bl	8000580 <uart1_receiveArray>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <uart1_receiveArray>:
void uart1_receiveArray(uint8_t *arraypointer, uint32_t length) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	uint8_t *currentpointer = arraypointer;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60fb      	str	r3, [r7, #12]
	for (uint32_t k = 0; k < length; k++) { //fill the buffer with nulls so that it doesn't retain data from previous transmissions
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	e007      	b.n	80005a4 <uart1_receiveArray+0x24>
		*(arraypointer + k) = '\0';
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4413      	add	r3, r2
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	for (uint32_t k = 0; k < length; k++) { //fill the buffer with nulls so that it doesn't retain data from previous transmissions
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3f3      	bcc.n	8000594 <uart1_receiveArray+0x14>
	}
	while (!(USART1->ISR & USART_ISR_RXNE)); //wait indefinitely for the beginning of the transmission
 80005ac:	bf00      	nop
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <uart1_receiveArray+0x94>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 0320 	and.w	r3, r3, #32
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <uart1_receiveArray+0x2e>
	USART1->ICR |= USART_ICR_RTOCF; //make sure receiver timeout flag is cleared
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <uart1_receiveArray+0x94>)
 80005bc:	6a1b      	ldr	r3, [r3, #32]
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <uart1_receiveArray+0x94>)
 80005c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c4:	6213      	str	r3, [r2, #32]
	while (!(USART1->ISR & USART_ISR_RTOF)) { //while not receiver timeout
 80005c6:	e013      	b.n	80005f0 <uart1_receiveArray+0x70>
		if (((USART1->ISR & USART_ISR_RXNE)) && (currentpointer < arraypointer + length)) { //if buffer is not full yet and there is new data
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <uart1_receiveArray+0x94>)
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	f003 0320 	and.w	r3, r3, #32
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00d      	beq.n	80005f0 <uart1_receiveArray+0x70>
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	4413      	add	r3, r2
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d207      	bcs.n	80005f0 <uart1_receiveArray+0x70>
			*currentpointer = USART1->RDR;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <uart1_receiveArray+0x94>)
 80005e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	701a      	strb	r2, [r3, #0]
			currentpointer++;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
	while (!(USART1->ISR & USART_ISR_RTOF)) { //while not receiver timeout
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <uart1_receiveArray+0x94>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0e5      	beq.n	80005c8 <uart1_receiveArray+0x48>
			//if (length==1) break;
		}
	}
	USART1->ICR |= USART_ICR_RTOCF; //when receiver timed out and we're done, clear the flag
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <uart1_receiveArray+0x94>)
 80005fe:	6a1b      	ldr	r3, [r3, #32]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <uart1_receiveArray+0x94>)
 8000602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000606:	6213      	str	r3, [r2, #32]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40011000 	.word	0x40011000

08000618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800061c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f000 f811 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fe3d 	bl	80002c8 <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800065c:	08000714 	.word	0x08000714
  ldr r2, =_sbss
 8000660:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000664:	2000001c 	.word	0x2000001c

08000668 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC_IRQHandler>
	...

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	; (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	; (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	; (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	; (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 f818 	bl	80006b4 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	0800070c 	.word	0x0800070c
 80006a8:	0800070c 	.word	0x0800070c
 80006ac:	0800070c 	.word	0x0800070c
 80006b0:	08000710 	.word	0x08000710

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
